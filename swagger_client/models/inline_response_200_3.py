# coding: utf-8

"""
    cmu mars brass ta: phase 2, cp3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x': 'float',
        'y': 'float',
        'battery': 'int',
        'sim_time': 'int',
        'lights': 'list[str]'
    }

    attribute_map = {
        'x': 'x',
        'y': 'y',
        'battery': 'battery',
        'sim_time': 'sim-time',
        'lights': 'lights'
    }

    def __init__(self, x=None, y=None, battery=None, sim_time=None, lights=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501

        self._x = None
        self._y = None
        self._battery = None
        self._sim_time = None
        self._lights = None
        self.discriminator = None

        self.x = x
        self.y = y
        self.battery = battery
        self.sim_time = sim_time
        self.lights = lights

    @property
    def x(self):
        """Gets the x of this InlineResponse2003.  # noqa: E501

        the current x coordinate of the bot. must be within the boundaries of the map.  # noqa: E501

        :return: The x of this InlineResponse2003.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this InlineResponse2003.

        the current x coordinate of the bot. must be within the boundaries of the map.  # noqa: E501

        :param x: The x of this InlineResponse2003.  # noqa: E501
        :type: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this InlineResponse2003.  # noqa: E501

        the current y coordinate of the bot. must be within the boundaries of the map.  # noqa: E501

        :return: The y of this InlineResponse2003.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this InlineResponse2003.

        the current y coordinate of the bot. must be within the boundaries of the map.  # noqa: E501

        :param y: The y of this InlineResponse2003.  # noqa: E501
        :type: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501

        self._y = y

    @property
    def battery(self):
        """Gets the battery of this InlineResponse2003.  # noqa: E501

        the current charge of the battery, in mWh  # noqa: E501

        :return: The battery of this InlineResponse2003.  # noqa: E501
        :rtype: int
        """
        return self._battery

    @battery.setter
    def battery(self, battery):
        """Sets the battery of this InlineResponse2003.

        the current charge of the battery, in mWh  # noqa: E501

        :param battery: The battery of this InlineResponse2003.  # noqa: E501
        :type: int
        """
        if battery is None:
            raise ValueError("Invalid value for `battery`, must not be `None`")  # noqa: E501
        if battery is not None and battery < 0:  # noqa: E501
            raise ValueError("Invalid value for `battery`, must be a value greater than or equal to `0`")  # noqa: E501

        self._battery = battery

    @property
    def sim_time(self):
        """Gets the sim_time of this InlineResponse2003.  # noqa: E501

        the time when this observation was computed, in simulation seconds  # noqa: E501

        :return: The sim_time of this InlineResponse2003.  # noqa: E501
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time):
        """Sets the sim_time of this InlineResponse2003.

        the time when this observation was computed, in simulation seconds  # noqa: E501

        :param sim_time: The sim_time of this InlineResponse2003.  # noqa: E501
        :type: int
        """
        if sim_time is None:
            raise ValueError("Invalid value for `sim_time`, must not be `None`")  # noqa: E501
        if sim_time is not None and sim_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `sim_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sim_time = sim_time

    @property
    def lights(self):
        """Gets the lights of this InlineResponse2003.  # noqa: E501

        the list of names from LIGHTSET of those lights which are currently turned on. all other lights are currently turned off.  # noqa: E501

        :return: The lights of this InlineResponse2003.  # noqa: E501
        :rtype: list[str]
        """
        return self._lights

    @lights.setter
    def lights(self, lights):
        """Sets the lights of this InlineResponse2003.

        the list of names from LIGHTSET of those lights which are currently turned on. all other lights are currently turned off.  # noqa: E501

        :param lights: The lights of this InlineResponse2003.  # noqa: E501
        :type: list[str]
        """
        if lights is None:
            raise ValueError("Invalid value for `lights`, must not be `None`")  # noqa: E501

        self._lights = lights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
