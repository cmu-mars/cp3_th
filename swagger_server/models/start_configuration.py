# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StartConfiguration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, start_loc: str=None, target_loc: str=None, configuration: str=None, utility: str=None):  # noqa: E501
        """StartConfiguration - a model defined in Swagger

        :param start_loc: The start_loc of this StartConfiguration.  # noqa: E501
        :type start_loc: str
        :param target_loc: The target_loc of this StartConfiguration.  # noqa: E501
        :type target_loc: str
        :param configuration: The configuration of this StartConfiguration.  # noqa: E501
        :type configuration: str
        :param utility: The utility of this StartConfiguration.  # noqa: E501
        :type utility: str
        """
        self.swagger_types = {
            'start_loc': str,
            'target_loc': str,
            'configuration': str,
            'utility': str
        }

        self.attribute_map = {
            'start_loc': 'start-loc',
            'target_loc': 'target-loc',
            'configuration': 'configuration',
            'utility': 'utility'
        }

        self._start_loc = start_loc
        self._target_loc = target_loc
        self._configuration = configuration
        self._utility = utility

    @classmethod
    def from_dict(cls, dikt) -> 'StartConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StartConfiguration of this StartConfiguration.  # noqa: E501
        :rtype: StartConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_loc(self) -> str:
        """Gets the start_loc of this StartConfiguration.


        :return: The start_loc of this StartConfiguration.
        :rtype: str
        """
        return self._start_loc

    @start_loc.setter
    def start_loc(self, start_loc: str):
        """Sets the start_loc of this StartConfiguration.


        :param start_loc: The start_loc of this StartConfiguration.
        :type start_loc: str
        """
        if start_loc is None:
            raise ValueError("Invalid value for `start_loc`, must not be `None`")  # noqa: E501

        self._start_loc = start_loc

    @property
    def target_loc(self) -> str:
        """Gets the target_loc of this StartConfiguration.


        :return: The target_loc of this StartConfiguration.
        :rtype: str
        """
        return self._target_loc

    @target_loc.setter
    def target_loc(self, target_loc: str):
        """Sets the target_loc of this StartConfiguration.


        :param target_loc: The target_loc of this StartConfiguration.
        :type target_loc: str
        """
        if target_loc is None:
            raise ValueError("Invalid value for `target_loc`, must not be `None`")  # noqa: E501

        self._target_loc = target_loc

    @property
    def configuration(self) -> str:
        """Gets the configuration of this StartConfiguration.


        :return: The configuration of this StartConfiguration.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: str):
        """Sets the configuration of this StartConfiguration.


        :param configuration: The configuration of this StartConfiguration.
        :type configuration: str
        """
        allowed_values = ["amcl-kinect", "amcl-lidar", "mrpt-kinect", "mrpt-lidar", "aruco-camera"]  # noqa: E501
        if configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `configuration` ({0}), must be one of {1}"
                .format(configuration, allowed_values)
            )

        self._configuration = configuration

    @property
    def utility(self) -> str:
        """Gets the utility of this StartConfiguration.


        :return: The utility of this StartConfiguration.
        :rtype: str
        """
        return self._utility

    @utility.setter
    def utility(self, utility: str):
        """Sets the utility of this StartConfiguration.


        :param utility: The utility of this StartConfiguration.
        :type utility: str
        """
        allowed_values = ["favor-timeliness", "favor-efficiency", "favor-safety"]  # noqa: E501
        if utility not in allowed_values:
            raise ValueError(
                "Invalid value for `utility` ({0}), must be one of {1}"
                .format(utility, allowed_values)
            )

        self._utility = utility
