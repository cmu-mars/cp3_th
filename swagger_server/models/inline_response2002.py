# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse2002(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, message: str=None, robot_x: float=None, robot_y: float=None, robot_w: float=None, robot_configuration: str=None, robot_path: List[str]=None, robot_speed: float=None, robot_charge: float=None):  # noqa: E501
        """InlineResponse2002 - a model defined in Swagger

        :param status: The status of this InlineResponse2002.  # noqa: E501
        :type status: str
        :param message: The message of this InlineResponse2002.  # noqa: E501
        :type message: str
        :param robot_x: The robot_x of this InlineResponse2002.  # noqa: E501
        :type robot_x: float
        :param robot_y: The robot_y of this InlineResponse2002.  # noqa: E501
        :type robot_y: float
        :param robot_w: The robot_w of this InlineResponse2002.  # noqa: E501
        :type robot_w: float
        :param robot_configuration: The robot_configuration of this InlineResponse2002.  # noqa: E501
        :type robot_configuration: str
        :param robot_path: The robot_path of this InlineResponse2002.  # noqa: E501
        :type robot_path: List[str]
        :param robot_speed: The robot_speed of this InlineResponse2002.  # noqa: E501
        :type robot_speed: float
        :param robot_charge: The robot_charge of this InlineResponse2002.  # noqa: E501
        :type robot_charge: float
        """
        self.swagger_types = {
            'status': str,
            'message': str,
            'robot_x': float,
            'robot_y': float,
            'robot_w': float,
            'robot_configuration': str,
            'robot_path': List[str],
            'robot_speed': float,
            'robot_charge': float
        }

        self.attribute_map = {
            'status': 'status',
            'message': 'message',
            'robot_x': 'robot-x',
            'robot_y': 'robot-y',
            'robot_w': 'robot-w',
            'robot_configuration': 'robot-configuration',
            'robot_path': 'robot-path',
            'robot_speed': 'robot-speed',
            'robot_charge': 'robot-charge'
        }

        self._status = status
        self._message = message
        self._robot_x = robot_x
        self._robot_y = robot_y
        self._robot_w = robot_w
        self._robot_configuration = robot_configuration
        self._robot_path = robot_path
        self._robot_speed = robot_speed
        self._robot_charge = robot_charge

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2002':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_2 of this InlineResponse2002.  # noqa: E501
        :rtype: InlineResponse2002
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this InlineResponse2002.


        :return: The status of this InlineResponse2002.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this InlineResponse2002.


        :param status: The status of this InlineResponse2002.
        :type status: str
        """
        allowed_values = ["not-running", "live", "mission-running", "adapting", "adapted", "finished", "starting"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def message(self) -> str:
        """Gets the message of this InlineResponse2002.


        :return: The message of this InlineResponse2002.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this InlineResponse2002.


        :param message: The message of this InlineResponse2002.
        :type message: str
        """

        self._message = message

    @property
    def robot_x(self) -> float:
        """Gets the robot_x of this InlineResponse2002.


        :return: The robot_x of this InlineResponse2002.
        :rtype: float
        """
        return self._robot_x

    @robot_x.setter
    def robot_x(self, robot_x: float):
        """Sets the robot_x of this InlineResponse2002.


        :param robot_x: The robot_x of this InlineResponse2002.
        :type robot_x: float
        """

        self._robot_x = robot_x

    @property
    def robot_y(self) -> float:
        """Gets the robot_y of this InlineResponse2002.


        :return: The robot_y of this InlineResponse2002.
        :rtype: float
        """
        return self._robot_y

    @robot_y.setter
    def robot_y(self, robot_y: float):
        """Sets the robot_y of this InlineResponse2002.


        :param robot_y: The robot_y of this InlineResponse2002.
        :type robot_y: float
        """

        self._robot_y = robot_y

    @property
    def robot_w(self) -> float:
        """Gets the robot_w of this InlineResponse2002.


        :return: The robot_w of this InlineResponse2002.
        :rtype: float
        """
        return self._robot_w

    @robot_w.setter
    def robot_w(self, robot_w: float):
        """Sets the robot_w of this InlineResponse2002.


        :param robot_w: The robot_w of this InlineResponse2002.
        :type robot_w: float
        """

        self._robot_w = robot_w

    @property
    def robot_configuration(self) -> str:
        """Gets the robot_configuration of this InlineResponse2002.


        :return: The robot_configuration of this InlineResponse2002.
        :rtype: str
        """
        return self._robot_configuration

    @robot_configuration.setter
    def robot_configuration(self, robot_configuration: str):
        """Sets the robot_configuration of this InlineResponse2002.


        :param robot_configuration: The robot_configuration of this InlineResponse2002.
        :type robot_configuration: str
        """
        allowed_values = ["xxxx-xxxxx", "amcl-kinect", "amcl-lidar", "mrpt-kinect", "mrpt-lidar", "aruco-camera"]  # noqa: E501
        if robot_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `robot_configuration` ({0}), must be one of {1}"
                .format(robot_configuration, allowed_values)
            )

        self._robot_configuration = robot_configuration

    @property
    def robot_path(self) -> List[str]:
        """Gets the robot_path of this InlineResponse2002.


        :return: The robot_path of this InlineResponse2002.
        :rtype: List[str]
        """
        return self._robot_path

    @robot_path.setter
    def robot_path(self, robot_path: List[str]):
        """Sets the robot_path of this InlineResponse2002.


        :param robot_path: The robot_path of this InlineResponse2002.
        :type robot_path: List[str]
        """

        self._robot_path = robot_path

    @property
    def robot_speed(self) -> float:
        """Gets the robot_speed of this InlineResponse2002.


        :return: The robot_speed of this InlineResponse2002.
        :rtype: float
        """
        return self._robot_speed

    @robot_speed.setter
    def robot_speed(self, robot_speed: float):
        """Sets the robot_speed of this InlineResponse2002.


        :param robot_speed: The robot_speed of this InlineResponse2002.
        :type robot_speed: float
        """

        self._robot_speed = robot_speed

    @property
    def robot_charge(self) -> float:
        """Gets the robot_charge of this InlineResponse2002.


        :return: The robot_charge of this InlineResponse2002.
        :rtype: float
        """
        return self._robot_charge

    @robot_charge.setter
    def robot_charge(self, robot_charge: float):
        """Sets the robot_charge of this InlineResponse2002.


        :param robot_charge: The robot_charge of this InlineResponse2002.
        :type robot_charge: float
        """

        self._robot_charge = robot_charge
