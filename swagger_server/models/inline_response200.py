# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, start_loc: str=None, target_loc: str=None, use_adaptation: bool=None, start_configuration: str=None, utility_function: str=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param start_loc: The start_loc of this InlineResponse200.  # noqa: E501
        :type start_loc: str
        :param target_loc: The target_loc of this InlineResponse200.  # noqa: E501
        :type target_loc: str
        :param use_adaptation: The use_adaptation of this InlineResponse200.  # noqa: E501
        :type use_adaptation: bool
        :param start_configuration: The start_configuration of this InlineResponse200.  # noqa: E501
        :type start_configuration: str
        :param utility_function: The utility_function of this InlineResponse200.  # noqa: E501
        :type utility_function: str
        """
        self.swagger_types = {
            'start_loc': str,
            'target_loc': str,
            'use_adaptation': bool,
            'start_configuration': str,
            'utility_function': str
        }

        self.attribute_map = {
            'start_loc': 'start-loc',
            'target_loc': 'target-loc',
            'use_adaptation': 'use-adaptation',
            'start_configuration': 'start-configuration',
            'utility_function': 'utility-function'
        }

        self._start_loc = start_loc
        self._target_loc = target_loc
        self._use_adaptation = use_adaptation
        self._start_configuration = start_configuration
        self._utility_function = utility_function

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_loc(self) -> str:
        """Gets the start_loc of this InlineResponse200.

        the name of the start map waypoint. must be a valid way point name from the map data. must not be equal to `target-loc`.  # noqa: E501

        :return: The start_loc of this InlineResponse200.
        :rtype: str
        """
        return self._start_loc

    @start_loc.setter
    def start_loc(self, start_loc: str):
        """Sets the start_loc of this InlineResponse200.

        the name of the start map waypoint. must be a valid way point name from the map data. must not be equal to `target-loc`.  # noqa: E501

        :param start_loc: The start_loc of this InlineResponse200.
        :type start_loc: str
        """

        self._start_loc = start_loc

    @property
    def target_loc(self) -> str:
        """Gets the target_loc of this InlineResponse200.

        the name of the goal map waypoint. must be a valid way point name from the map data. must not be equal to `start-loc`.  # noqa: E501

        :return: The target_loc of this InlineResponse200.
        :rtype: str
        """
        return self._target_loc

    @target_loc.setter
    def target_loc(self, target_loc: str):
        """Sets the target_loc of this InlineResponse200.

        the name of the goal map waypoint. must be a valid way point name from the map data. must not be equal to `start-loc`.  # noqa: E501

        :param target_loc: The target_loc of this InlineResponse200.
        :type target_loc: str
        """

        self._target_loc = target_loc

    @property
    def use_adaptation(self) -> bool:
        """Gets the use_adaptation of this InlineResponse200.

        if `true`, then the DAS will use adapative behaiviours; if `false` then the DAS will not use adaptive behaiviours  # noqa: E501

        :return: The use_adaptation of this InlineResponse200.
        :rtype: bool
        """
        return self._use_adaptation

    @use_adaptation.setter
    def use_adaptation(self, use_adaptation: bool):
        """Sets the use_adaptation of this InlineResponse200.

        if `true`, then the DAS will use adapative behaiviours; if `false` then the DAS will not use adaptive behaiviours  # noqa: E501

        :param use_adaptation: The use_adaptation of this InlineResponse200.
        :type use_adaptation: bool
        """

        self._use_adaptation = use_adaptation

    @property
    def start_configuration(self) -> str:
        """Gets the start_configuration of this InlineResponse200.

        the label of the starting configuration for the robot  # noqa: E501

        :return: The start_configuration of this InlineResponse200.
        :rtype: str
        """
        return self._start_configuration

    @start_configuration.setter
    def start_configuration(self, start_configuration: str):
        """Sets the start_configuration of this InlineResponse200.

        the label of the starting configuration for the robot  # noqa: E501

        :param start_configuration: The start_configuration of this InlineResponse200.
        :type start_configuration: str
        """
        allowed_values = ["amcl-kinect", "amcl-lidar", "mprt-kinect", "mprt-lidar", "aruco-camera"]  # noqa: E501
        if start_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `start_configuration` ({0}), must be one of {1}"
                .format(start_configuration, allowed_values)
            )

        self._start_configuration = start_configuration

    @property
    def utility_function(self) -> str:
        """Gets the utility_function of this InlineResponse200.

        the utility function to use for evaluating mission quality  # noqa: E501

        :return: The utility_function of this InlineResponse200.
        :rtype: str
        """
        return self._utility_function

    @utility_function.setter
    def utility_function(self, utility_function: str):
        """Sets the utility_function of this InlineResponse200.

        the utility function to use for evaluating mission quality  # noqa: E501

        :param utility_function: The utility_function of this InlineResponse200.
        :type utility_function: str
        """
        allowed_values = ["favor-timeliness", "favor-safety", "favor-efficiency"]  # noqa: E501
        if utility_function not in allowed_values:
            raise ValueError(
                "Invalid value for `utility_function` ({0}), must be one of {1}"
                .format(utility_function, allowed_values)
            )

        self._utility_function = utility_function
